generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sharebox {
  id          String      @id @default(uuid())
  name        String
  userId      String
  banners     Banner[]    @relation("ShareboxToBanner")
  categories  Category[]  @relation("ShareboxToCategory")
  products    Product[]   @relation("ShareboxToProduct")
  orders      Order[]     @relation("ShareboxToOrder")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Banner {
  id          String      @id @default(uuid())
  shareboxId  String
  sharebox    Sharebox    @relation("ShareboxToBanner", fields: [shareboxId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([shareboxId])
}

model Category {
  id          String    @id @default(uuid())
  shareboxId  String
  sharebox    Sharebox  @relation("ShareboxToCategory", fields: [shareboxId], references: [id])
  bannerId    String
  banner      Banner    @relation(fields: [bannerId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([shareboxId])
  @@index([bannerId])
}

model Product {
  id         String   @id @default(uuid())
  shareboxId String
  sharebox   Sharebox @relation("ShareboxToProduct", fields: [shareboxId], references: [id])
  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  images     Image[]  @relation("ProductToImage")
  passes     Pass[]   @relation("ProductToPass")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([shareboxId])
  @@index([categoryId])
}

model Image {
  id        String   @id @default(uuid())
  passId    String?
  pass      Pass?    @relation("PassToImage", fields: [passId], references: [id], onDelete: Cascade)
  productId String?
  product   Product? @relation("ProductToImage", fields: [productId], references: [id])
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([passId])
  @@index([productId])
}

model Pass {
  id          String    @id @default(uuid())
  productId   String?
  product     Product?   @relation("ProductToPass", fields: [productId], references: [id])
  name        String
  description String
  price       Int
  duration    Int       // 일 단위
  isArchived  Boolean   @default(false)
  images      Image[]   @relation("PassToImage")
  orderItems  OrderItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([productId])
}

model Order {
  id          String      @id @default(uuid())
  shareboxId  String
  sharebox    Sharebox    @relation("ShareboxToOrder", fields: [shareboxId], references: [id])
  orderItems  OrderItem[]
  isPaid      Boolean     @default(false)
  phone       String      @default("")
  address     String      @default("")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([shareboxId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  passId    String
  pass      Pass    @relation(fields: [passId], references: [id])

  @@index([orderId])
  @@index([passId])
}